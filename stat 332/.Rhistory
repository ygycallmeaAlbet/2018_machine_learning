M <- M[2]
mu_reg <- y_bar + M * (x_mu - x_bar)
M
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
M <- M$residuals
mu_reg <- y_bar + M * (x_mu - x_bar)
M
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
M <- M$coef[2]
mu_reg <- y_bar + M * (x_mu - x_bar)
M
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
mu_reg <- y_bar + M * (x_mu - x_bar)
M
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
mu_reg <- y_bar + M * (x_mu - x_bar)
M[2]
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
mu_reg <- y_bar + M * (x_mu - x_bar)
M[1]
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
mu_reg <- y_bar + M * (x_mu - x_bar)
M[0]
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
mu_reg <- y_bar + M * (x_mu - x_bar)
M[3]
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
mu_reg <- y_bar + M * (x_mu - x_bar)
M[4]
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
mu_reg <- y_bar + M * (x_mu - x_bar)
M[1][2]
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
mu_reg <- y_bar + M * (x_mu - x_bar)
M[1]
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
mu_reg <- y_bar + M * (x_mu - x_bar)
M$coefficients[2]
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
M <- M$coefficients[2]
mu_reg <- y_bar + M * (x_mu - x_bar)
mu_reg <- y_bar + M * (x_mu - x_bar)
reg_err <- 1 / (my_n - 1) * sum((my_data$Age - y_bar - M * (my_data$Diameter - x_bar)^2)
mu_reg <- y_bar + M * (x_mu - x_bar)
reg_err <- 1 / (my_n - 1) * sum(my_data$Age - y_bar - M * (my_data$Diameter - x_bar)^2)
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
M <- M$coefficients[2]
mu_reg <- y_bar + M * (x_mu - x_bar)
reg_err <- 1 / (my_n - 1) * sum(my_data$Age - y_bar - M * (my_data$Diameter - x_bar)^2)
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
M <- M$coefficients[2]
mu_reg <- y_bar + M * (x_mu - x_bar)
reg_err <- 1 / (my_n - 1) * sum(my_data$Age - y_bar - M * (my_data$Diameter - x_bar)^2)
reg_L <- mu_reg - c*sqrt((1-my_n/my_N) * reg_err / my_n)
reg_U <- mu_reg + c*sqrt((1-my_n/my_N) * reg_err / my_n)
reg_L
reg_U
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
M <- M$coefficients[2]
mu_reg <- y_bar + M * (x_mu - x_bar)
mu_reg
reg_err <- 1 / (my_n - 1) * sum(my_data$Age - y_bar - M * (my_data$Diameter - x_bar)^2)
mu_reg
reg_err <- 1 / (my_n - 1) * sum(my_data$Age - y_bar - M * (my_data$Diameter - x_bar)^2)
reg_err
reg_err
reg_L <- mu_reg - c*sqrt((1-my_n/my_N) * reg_err / my_n)
reg_U <- mu_reg + c*sqrt((1-my_n/my_N) * reg_err / my_n)
reg_L
moe_rat <- 1.96* sqrt((1 - my_n/my_N) * rat_err/my_n)
rat_err
reg_err <- 1 / (my_n - 1) * sum(my_data$Age - y_bar - M * (my_data$Diameter - x_bar)^2)
mu_reg
reg_err
reg_L <- mu_reg - c*sqrt((1-my_n/my_N) * reg_err / my_n)
mu_reg <- y_bar + M * (x_mu - x_bar)
reg_err <- 1 / (my_n - 1) * sum(my_data$Age - y_bar - M * (my_data$Diameter - x_bar)^2)
reg_L <- mu_reg - c*sqrt((1-my_n/my_N) * -reg_err / my_n)
reg_U <- mu_reg + c*sqrt((1-my_n/my_N) * -reg_err / my_n)
reg_L
reg_U
reg_U
# It justified because from the graph we could find that there is a linear relationship
# between x and y, and both of them are random variables and countinus, and:
moe_sps <- 1.96* sqrt((1 - my_n/my_N) * y_err/my_n)
moe_reg <- 1.96* sqrt((1 - my_n/my_N) * reg_err/my_n)
moe_rat               # 7.794237
moe_sps               # 12.45084
reg_U
# It justified because from the graph we could find that there is a linear relationship
# between x and y, and both of them are random variables and countinus, and:
moe_sps <- 1.96* sqrt((1 - my_n/my_N) * y_err/my_n)
moe_reg <- 1.96* sqrt((1 - my_n/my_N) * reg_err/my_n)
moe_reg               # 7.794237
moe_sps               # 12.45084
# It justified because from the graph we could find that there is a linear relationship
# between x and y, and both of them are random variables and countinus, and:
moe_sps <- 1.96* sqrt((1 - my_n/my_N) * y_err/my_n)
moe_reg <- 1.96* sqrt((1 - my_n/my_N) * -reg_err/my_n)
moe_reg               # 7.794237
moe_sps               # 12.45084
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
M <- M$coefficients[2]
mu_reg <- y_bar + M * (x_mu - x_bar)
reg_err <- 1 / (my_n - 1) * sum(my_data$Age - y_bar - M * (my_data$Diameter - x_bar)^2)
reg_L <- mu_reg - c*sqrt((1-my_n/my_N) * -reg_err / my_n)
reg_U <- mu_reg + c*sqrt((1-my_n/my_N) * -reg_err / my_n)
reg_L
reg_U
# It justified because from the graph we could find that there is a linear relationship
# between x and y, and both of them are random variables and countinus, and:
moe_sps <- 1.96* sqrt((1 - my_n/my_N) * y_err/my_n)
moe_reg <- 1.96* sqrt((1 - my_n/my_N) * -reg_err/my_n)
moe_reg               # 2.78056
moe_sps               # 12.45084
# part d
M <- lm(my_data$Age ~ my_data$Diameter)
M <- M$coefficients[2]
mu_reg <- y_bar + M * (x_mu - x_bar)
reg_err <- 1 / (my_n - 1) * sum(my_data$Age - y_bar - M * (my_data$Diameter - x_bar)^2)
reg_L <- mu_reg - c*sqrt((1-my_n/my_N) * -reg_err / my_n)
reg_U <- mu_reg + c*sqrt((1-my_n/my_N) * -reg_err / my_n)
reg_L                                                   #
reg_U
# part e
theta_err <- 1/ x_bar^2 * (1 - my_n / 2 ) * rat_err / my_n
theta_L <- theta - c*sqrt(theta_err)
theta_U <- theta + c*sqrt(theta_err)
theta_L
theta_U
# part e
theta_err <- 1/ x_bar^2 * (1 - my_n / 2 ) * rat_err / my_n
theta_err
theta_L <- theta - c*sqrt(theta_err)
# part e
theta_err <- 1/ x_bar^2 * (1 - my_n / 2 ) * rat_err / my_n
theta_L <- theta - c*sqrt(-theta_err)
theta_U <- theta + c*sqrt(-theta_err)
theta_L
theta_U
# part e
theta_err <- 1/ x_bar^2 * (1 - my_n / 2 ) * rat_err / my_n
theta_L <- theta - c*sqrt((1-my_n/my_N) * -theta_err / my_n)
theta_U <- theta + c*sqrt((1-my_n/my_N) * -theta_err / my_n)
theta_L                                                  # 8.911118
theta_U
cou <- as.vector(my_data$Age)/as.vector(my_data$Diameter)
cou_mu <- mean(cou)
cou_err <- sd(cou)
cou_L <- theta - c*sqrt((1-my_n/my_N) * - cou_err / my_n)
cou_U <- theta + c*sqrt((1-my_n/my_N) * - cou_err / my_n)
cou_L                                                  # 10.86353
cou_U                                                  # 11.97539
cou <- as.vector(my_data$Age)/as.vector(my_data$Diameter)
cou_mu <- mean(cou)
cou_err <- sd(cou)
cou_L <- theta - c*sqrt((1-my_n/my_N) * cou_err / my_n)
cou_U <- theta + c*sqrt((1-my_n/my_N) * cou_err / my_n)
cou_L                                                  # 10.86353
cou_U                                                  # 11.97539
cou <- my_data$Age / my_data$Diameter
cou_mu <- mean(cou)
cou_err <- sd(cou)
cou_L <- theta - c*sqrt((1-my_n/my_N) * cou_err / my_n)
cou_U <- theta + c*sqrt((1-my_n/my_N) * cou_err / my_n)
cou_L                                                  # 10.83303
cou_U                                                  # 12.00589
ncol(1)
ncol(1,4)
ncol(combn(7,1))
ncol(combn(5,1))
ncol(combn(2,1))
a <- ncol(combn(2,1))
a
a[1]
a[2]
a[3]
a
ll <- list()
ll
ll[1] = [1][1]
ll[[1] = [1][1]
ll[[1] <- [1][1]
ll[[1]] <- combn(7,1)[2]
ll
sample <- list()
count <- 1
for (i in 1:6){               # N - 1
n = ncol(combn(7,i))
for(j in 1:n){
sample[[count]]=combn(7,j)[j]
count = count + 1
}
}
sample <- list()
count <- 1
for (i in 1:6){               # N - 1
n = ncol(combn(7,i))
for(j in 1:n){
sample[[count]]=combn(8,j)[j]
count = count + 1
}
}
sample
sample <- list()
count <- 1
for (i in 1:7){               # N - 1
n = ncol(combn(8,i))
for(j in 1:n){
sample[[count]]=combn(8,j)[j]
count = count + 1
}
}
for (i in 1:7){               # N - 1
n = ncol(combn(8,i))
for(j in 1:n){
sample[[count]]=combn(8,j)[j]
count = count + 1
}
}
sample <- list()
count <- 1
for (i in 1:7){               # N - 1
n = ncol(combn(8,i))
for(j in 1:n){
sample[[count]]=combn(8,j)[j]
count = count + 1
}
}
for (i in 1:6){               # N - 1
n = ncol(combn(7,i))
for(j in 1:n){
sample[[count]]=combn(7,j)[j]
count = count + 1
}
}
for (i in 1:6){               # N - 1
n = ncol(combn(6,i))
for(j in 1:n){
sample[[count]]=combn(7,j)[j]
count = count + 1
}
}
sample
clr
clean
sample
length(sample[1])
length(sample[0])
length(sample[10])
length(sample[11])
length(sample[12])
ll <- list(list())
ll
ll <- list() * 8
ll <- list(list() * 8)
combn(7,4)[3]
b <- combn(7,4)[3]
b
b[1]
b[2]
b[3]
samples <- matrix(, nrow = 8, ncol = 8.columns)
for(column in 1:8.columns){
samples[, column] <- vector
}
samples <- matrix(, nrow = 8, ncol = n.columns)
for(column in 1:n.columns){
samples[, column] <- vector
}
samples
samples <- matrix(, nrow = 8, ncol = n.columns)
for(column in 1:n.columns){
samples[, column] <- vector
}
samples <- matrix(, nrow = 8, ncol = n.columns)
for(column in 1:n.columns){
samples[, column] <- vector
}
samples
samples <- matrix(, nrow = 8, ncol = n.columns)
for(column in 1:n.columns){
samples[, column] <- vector
}
samples[0]
List <- list()
for(i in 1:n)
{
normF <- #something
List[[i]] <- normF
}
Matrix = do.call(cbind, List)
List
List <- list()
for(i in 1:8)
{
normF <- #something
List[[i]] <- normF
}
Matrix = do.call(cbind, List)
List
lists <- lists()
for(i in 1:8)
{
normF <- #something
lists[[i]] <- normF
}
Matrix = do.call(cbind, lists)
lists <- lists()
for(i in 1:8)
{
lists[[i]] <- 1
}
Matrix = do.call(cbind, lists)
lists <- list()
for(i in 1:8)
{
lists[[i]] <- 1
}
Matrix = do.call(cbind, lists)
lists
lists <- list()
for(i in 1:8)
{
lists[[i]] <- list()
}
Matrix = do.call(cbind, lists)
lists
entry = list()
cnt = 1
for(i in 1:6){
n = ncol(combn(7,i))
for ( j in 1:n) {
entry[[cnt]] = combn(7,i)[,j]
cnt = cnt + 1
}
}
entry
entry[128]
entry[126]
entry[127]
entry = list()
cnt = 1
for(i in 1:6){
n = ncol(combn(7,i))
for ( j in 1:n) {
entry[[cnt]] = combn(7,i)[j]
cnt = cnt + 1
}
}
entry
entry = list()
cnt = 1
for(i in 1:6){
n = ncol(combn(7,i))
for (j in 1:n) {
entry[[cnt]] = combn(7,i)[,j]
cnt = cnt + 1
}
}
entry
head(entry,20)
entry
combn(7,5)
ncol(combn(7,5))
combn(7,5)[,2]
combn(7,5)[,6]
cc <- c(1,0,0,1,1,0,1)
combn(7,5)[,2] * cc
cc * combn(7,5)[,2]
cc(combn(7,5)[,2])
cc <- c(1,0,0,1,1,0,1)
cc[combn(7,5)[,2]]
combn(7,5)[,2]
cc
samples <- list()
count <- 1
for(i in 1:7){
n <- factorial(8) / (factorial(i) * factorial(8 - i))
# find the number of combination in this i (8 choose i without put back)
for(ncol in 1:n){
samples[[count]] <- combn(8,i)[,ncol]
#selet the nth colum is one of our samples
count <- count + 1
}
}
head(samples,20)
samples <- c()
count <- 1
for(i in 1:7){
n <- factorial(8) / (factorial(i) * factorial(8 - i))
# find the number of combination in this i (8 choose i without put back)
for(ncol in 1:n){
samples[[count]] <- combn(8,i)[,ncol]
#selet the nth colum is one of our samples
count <- count + 1
}
}
head(samples,20)
op = list(1,0,0,1,1,0,1)
op(combn(7,5)[,2])
op = c(1,0,0,1,1,0,1)
op(combn(7,5)[,2])
op <- c(1,0,0,1,1,0,1)
op(combn(7,5)[,2])
op[combn(7,5)[,2]]
op <- list(1,0,0,1,1,0,1)
op[combn(7,5)[,2]]
sum(op[combn(7,5)[,2]])
op <- c(1,0,0,1,1,0,1)
op[combn(7,5)[,2]]
sum(op[combn(7,5)[,2]])
op = c(1,0,0,1,1,0,1,0)
my_N = length(samples)
my_out = c()
for(i in 1:N){
loc_sum <- sum(op[samples])
my_out <- c(my_out,loc_sum)
}
samples <- list()
count <- 1
for(i in 1:7){
n <- factorial(8) / (factorial(i) * factorial(8 - i))
# find the number of combination in this i (8 choose i without put back)
for(ncol in 1:n){
samples[[count]] <- combn(8,i)[,ncol]
#selet the nth colum is one of our samples
count <- count + 1
}
}
head(samples,20)
op = c(1,0,0,1,1,0,1,0)
my_N = length(samples)
my_out = c()
for(i in 1:my_N){
loc_sum <- sum(op[samples])
my_out <- c(my_out,loc_sum)
}
loc_sum <- sum(op[samples[[i]])
my_out <- c(my_out,loc_sum)
}
op = c(1,0,0,1,1,0,1,0)
my_N = length(samples)
my_out = c()
for(i in 1:my_N){
my_out <- c(my_out,loc_sum)
}
samples
op
op[samples[[25]]]
sum(op[samples[[25]]])
my_out
my_out <- c()
my_out
my_out <- c(my_out,sum(op[samples[[25]]]))
my_out
samples <- list()
count <- 1
for(i in 1:7){
n <- factorial(8) / (factorial(i) * factorial(8 - i))
# find the number of combination in this i (8 choose i without put back)
for(ncol in 1:n){
samples[[count]] <- combn(8,i)[,ncol]
#selet the nth colum is one of our samples
count <- count + 1
}
}
head(samples,20)
op = c(1,0,0,1,1,0,1,0)
my_N = length(samples)
my_out = c()
for(i in 1:my_N){
my_out <- c(my_out,loc_sum)
}
op = c(1,0,0,1,1,0,1,0)
my_N = length(samples)
my_out = c()
for(i in 1:my_N){
my_out <- c(my_out, loc_sum)
}
my_out <- c(my_out, sum(op[samples[[i]]))
}
my_out = c()
for(i in 1:my_N){
my_out <- c(my_out, sum(op[samples[[i]]]))
}
my_out
y_mu = sum(my_out / 8) / my_N
y_mu
head(samples,20)
y_mu
# part 3 ------------------------------
y_mu_sq <- y_mu ^ 2
y_sq_mu <- sum(my_out^2 / 8) / my_N
var <- y_mu_sq - y_sq_mu
var
